// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Rcpp_read_binary_tree
SEXP Rcpp_read_binary_tree(std::string fileName, long offset, bool globalNames, std::vector<std::string> names, std::vector<std::string> attributeNames, std::vector<bool> attributesAreNumeric);
RcppExport SEXP _TreeNode_Rcpp_read_binary_tree(SEXP fileNameSEXP, SEXP offsetSEXP, SEXP globalNamesSEXP, SEXP namesSEXP, SEXP attributeNamesSEXP, SEXP attributesAreNumericSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< long >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< bool >::type globalNames(globalNamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type attributeNames(attributeNamesSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type attributesAreNumeric(attributesAreNumericSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_read_binary_tree(fileName, offset, globalNames, names, attributeNames, attributesAreNumeric));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_read_binary_trees
SEXP Rcpp_read_binary_trees(std::string fileName);
RcppExport SEXP _TreeNode_Rcpp_read_binary_trees(SEXP fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_read_binary_trees(fileName));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_read_nwka_string
SEXP Rcpp_read_nwka_string(std::string source, bool debug);
RcppExport SEXP _TreeNode_Rcpp_read_nwka_string(SEXP sourceSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_read_nwka_string(source, debug));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_read_nwka_file
SEXP Rcpp_read_nwka_file(std::string fileName, bool debug);
RcppExport SEXP _TreeNode_Rcpp_read_nwka_file(SEXP fileNameSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_read_nwka_file(fileName, debug));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_read_nexus_file
SEXP Rcpp_read_nexus_file(std::string fileName, bool debug);
RcppExport SEXP _TreeNode_Rcpp_read_nexus_file(SEXP fileNameSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_read_nexus_file(fileName, debug));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_write_binary_trees
void Rcpp_write_binary_trees(Rcpp::List trees, std::string fileName, std::vector<Rbyte> additionalData);
RcppExport SEXP _TreeNode_Rcpp_write_binary_trees(SEXP treesSEXP, SEXP fileNameSEXP, SEXP additionalDataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< std::vector<Rbyte> >::type additionalData(additionalDataSEXP);
    Rcpp_write_binary_trees(trees, fileName, additionalData);
    return R_NilValue;
END_RCPP
}
// Rcpp_begin_writing_binary_trees
std::vector<int64_t> Rcpp_begin_writing_binary_trees(std::string fileName);
RcppExport SEXP _TreeNode_Rcpp_begin_writing_binary_trees(SEXP fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_begin_writing_binary_trees(fileName));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_write_binary_tree
std::vector<int64_t> Rcpp_write_binary_tree(Rcpp::List tree, std::string fileName, std::vector<int64_t> addresses);
RcppExport SEXP _TreeNode_Rcpp_write_binary_tree(SEXP treeSEXP, SEXP fileNameSEXP, SEXP addressesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type addresses(addressesSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_write_binary_tree(tree, fileName, addresses));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_finish_writing_binary_trees
void Rcpp_finish_writing_binary_trees(std::string fileName, std::vector<int64_t> addresses, std::vector<Rbyte> additionalData);
RcppExport SEXP _TreeNode_Rcpp_finish_writing_binary_trees(SEXP fileNameSEXP, SEXP addressesSEXP, SEXP additionalDataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type addresses(addressesSEXP);
    Rcpp::traits::input_parameter< std::vector<Rbyte> >::type additionalData(additionalDataSEXP);
    Rcpp_finish_writing_binary_trees(fileName, addresses, additionalData);
    return R_NilValue;
END_RCPP
}
// Rcpp_multiPhylo_to_string
std::string Rcpp_multiPhylo_to_string(Rcpp::List trees, bool nwka, bool singleQuoted);
RcppExport SEXP _TreeNode_Rcpp_multiPhylo_to_string(SEXP treesSEXP, SEXP nwkaSEXP, SEXP singleQuotedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< bool >::type nwka(nwkaSEXP);
    Rcpp::traits::input_parameter< bool >::type singleQuoted(singleQuotedSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_multiPhylo_to_string(trees, nwka, singleQuoted));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_multiPhylo_to_file
void Rcpp_multiPhylo_to_file(Rcpp::List trees, std::string fileName, bool nwka, bool singleQuoted, bool append);
RcppExport SEXP _TreeNode_Rcpp_multiPhylo_to_file(SEXP treesSEXP, SEXP fileNameSEXP, SEXP nwkaSEXP, SEXP singleQuotedSEXP, SEXP appendSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< bool >::type nwka(nwkaSEXP);
    Rcpp::traits::input_parameter< bool >::type singleQuoted(singleQuotedSEXP);
    Rcpp::traits::input_parameter< bool >::type append(appendSEXP);
    Rcpp_multiPhylo_to_file(trees, fileName, nwka, singleQuoted, append);
    return R_NilValue;
END_RCPP
}
// Rcpp_multiPhylo_to_nexus
void Rcpp_multiPhylo_to_nexus(Rcpp::List trees, std::string fileName, bool translate, bool translateQuotes);
RcppExport SEXP _TreeNode_Rcpp_multiPhylo_to_nexus(SEXP treesSEXP, SEXP fileNameSEXP, SEXP translateSEXP, SEXP translateQuotesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< bool >::type translate(translateSEXP);
    Rcpp::traits::input_parameter< bool >::type translateQuotes(translateQuotesSEXP);
    Rcpp_multiPhylo_to_nexus(trees, fileName, translate, translateQuotes);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TreeNode_Rcpp_read_binary_tree", (DL_FUNC) &_TreeNode_Rcpp_read_binary_tree, 6},
    {"_TreeNode_Rcpp_read_binary_trees", (DL_FUNC) &_TreeNode_Rcpp_read_binary_trees, 1},
    {"_TreeNode_Rcpp_read_nwka_string", (DL_FUNC) &_TreeNode_Rcpp_read_nwka_string, 2},
    {"_TreeNode_Rcpp_read_nwka_file", (DL_FUNC) &_TreeNode_Rcpp_read_nwka_file, 2},
    {"_TreeNode_Rcpp_read_nexus_file", (DL_FUNC) &_TreeNode_Rcpp_read_nexus_file, 2},
    {"_TreeNode_Rcpp_write_binary_trees", (DL_FUNC) &_TreeNode_Rcpp_write_binary_trees, 3},
    {"_TreeNode_Rcpp_begin_writing_binary_trees", (DL_FUNC) &_TreeNode_Rcpp_begin_writing_binary_trees, 1},
    {"_TreeNode_Rcpp_write_binary_tree", (DL_FUNC) &_TreeNode_Rcpp_write_binary_tree, 3},
    {"_TreeNode_Rcpp_finish_writing_binary_trees", (DL_FUNC) &_TreeNode_Rcpp_finish_writing_binary_trees, 3},
    {"_TreeNode_Rcpp_multiPhylo_to_string", (DL_FUNC) &_TreeNode_Rcpp_multiPhylo_to_string, 3},
    {"_TreeNode_Rcpp_multiPhylo_to_file", (DL_FUNC) &_TreeNode_Rcpp_multiPhylo_to_file, 5},
    {"_TreeNode_Rcpp_multiPhylo_to_nexus", (DL_FUNC) &_TreeNode_Rcpp_multiPhylo_to_nexus, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_TreeNode(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
